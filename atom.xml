<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>http://luckyasme.github.io/</id>
  <title>Luckyasme</title>
  <subtitle>随心一记，有感就发</subtitle>
  <author>
    <name>Luckyasme</name>
  </author>
  <updated>2021-07-11T10:57:23.328Z</updated>
  <generator>@mr-hope/vuepress-plugin-feed</generator>
  <link rel="self" href="http://luckyasme.github.io/atom.xml"/>
  <link rel="alternate" href="http://luckyasme.github.io/"/>
  <rights>Copyright by Luckyasme</rights>
  <category term="ant design vue"/>
  <category term="electron"/>
  <category term="问题记录"/>
  <category term="vuepress"/>
  <contributor>
    <name>Luckyasme</name>
  </contributor>
  <entry>
    <title type="html">antdv更换主题（一）</title>
    <id>http://luckyasme.github.io/ant-design-vue/antdv%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <link href="http://luckyasme.github.io/ant-design-vue/antdv%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料"> 参考资料</h2>
<div><p>提示</p>
<ul>
<li>
<p><a href="https://github.com/vueComponent/ant-design-vue/blob/master/components/style/themes/default.less" target="_blank" rel="noopener noreferrer">ant design vue2.x 样式变量</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u011533744/article/details/113859736" target="_blank" rel="noopener noreferrer">基于antd-theme-generator插件实现ant design项目的动态主题切换</a></p>
</li>
</ul>
</div>
<h2 id="安装antd-theme-generator"> 安装antd-theme-generator</h2>
<p>执行如下命令</p>
<div><pre><code><span>npm</span> <span>install</span> antd-theme-generator -D
</code></pre>
<div><span>1</span><br></div></div><h2 id="创建配置js"> 创建配置js</h2>
<p>名字自取，我这里取为vue.antd.js，并存放在项目目录下，js内容如下：</p>
<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span><span>;</span>
<span>const</span> <span>{</span> generateTheme <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'antd-theme-generator'</span><span>)</span><span>;</span>

<span>const</span> options <span>=</span> <span>{</span>
  antDir<span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> <span>"./node_modules/antd"</span><span>)</span><span>,</span> <span>//antdv 目录的路径</span>
  stylesDir<span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> <span>"./src/assets/css/styles"</span><span>)</span><span>,</span> <span>//定制样式所在目录</span>
  varFile<span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> <span>"./src/assets/css/styles/var.less"</span><span>)</span><span>,</span>  <span>//与主题相关的样式变量文件的路径</span>
  mainLessFile<span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> <span>"./src/assets/css/styles/index.less"</span><span>)</span><span>,</span> <span>//less 主文件入口</span>
  outputFilePath<span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> <span>"./public/static/css/color.less"</span><span>)</span> <span>//生成的 less 文件存放路径，后面还需在 index.html 中引用生成的文件</span>
  themeVariables<span>:</span> <span>[</span>  <span>//要动态更改的样式变量，这里设置后才能动态更改，具体可参考 “ant design vue2.x 样式变量”</span>
    <span>"@primary-color"</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span><span>;</span>

<span>generateTheme</span><span>(</span>options<span>)</span>
  <span>.</span><span>then</span><span>(</span><span>less</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Antd theme generated successfully!!!"</span><span>)</span><span>;</span>
  <span>}</span><span>)</span>
  <span>.</span><span>catch</span><span>(</span><span>error</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Error"</span><span>,</span> error<span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="创建less"> 创建Less</h2>
<p>在 src/assets/css/styles 目录下分别创建 index.less 和 var.less 两个文件（路径和文件命名请根据前面的配置js进行调整）。</p>
<p>var.less 中引用原有的 andv 的样式和变量，若想对原有的样式变量进行覆盖最好也在此文件进行编写或引用。var.less 中赋了初始值的 less 变量要和 vue.antd.js 中的 themeVariables 数组中的less变量对应。</p>
<div><pre><code><span>// var.less</span>
@<span>import</span> <span>"~antd/lib/style/themes/default.less"</span><span>;</span> <span>//引入 antd 的样式</span>
@primary<span>-</span>color<span>:</span> #<span>1890</span>ff<span>;</span> <span>//覆盖原有的 primary-color</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>index.less 可以使用变量定义更多的样式，这样动态更换主题时使用了这些变量的样式也会更换。</p>
<div><pre><code><span>// index.less</span>
<span>.</span>exp <span>{</span>
  color<span>:</span> @primary<span>-</span>color<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="引用生成的样式"> 引用生成的样式</h2>
<p>修改 public/index.html 的内容，在 body 的第一行出插入如下内容。</p>
<div><pre><code><span><span><span>&lt;</span>body</span><span>></span></span>
  <span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>stylesheet/less<span>"</span></span> <span>type</span><span><span>=</span><span>"</span>text/css<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>./static/css/color.less<span>"</span></span> <span>/></span></span>
  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
    window<span>.</span>less <span>=</span> <span>{</span>
      async<span>:</span> <span>true</span><span>,</span>
      javascriptEnabled<span>:</span> <span>true</span>
    <span>}</span><span>;</span>
  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
  <span>&lt;!-- 必须引用less，不然样式无法生效，可以本地项目引入，或者cdn引入 --></span>
  <span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>"</span>text/javascript<span>"</span></span> <span>src</span><span><span>=</span><span>"</span>https://cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js<span>"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
  <span>&lt;!-- other content --></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="修改-serve-和-build-命令"> 修改 serve 和 build 命令</h2>
<p>在 package.json 中在 serve 命令或 build 命令前添加生成配置 js 的命令。使用 vue cli 的修改成如下命令：</p>
<div><pre><code>  <span>"serve"</span><span>:</span> <span>"node ./vue.antd.js &amp;&amp; vue-cli-service serve"</span>,
  <span>"build"</span><span>:</span> <span>"node ./vue.antd.js &amp;&amp; vue-cli-service build"</span>,
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="动态更换"> 动态更换</h2>
<p>编写一个函数，调用 window.less.modifyVars() 方法进行更换，如：</p>
<div><pre><code><span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  methods<span>:</span> <span>{</span>
    <span>handleChangeTheme</span><span>(</span><span>color</span><span>)</span> <span>{</span>
      window<span>.</span>less<span>.</span><span>modifyVars</span><span>(</span><span>{</span>
        <span>'@primary-color'</span><span>:</span> color<span>,</span>
      <span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>'success'</span><span>)</span>
      <span>}</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>error</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>error<span>)</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>]]></content>
    <author>
      <name>Luckyasme</name>
    </author>
    <category term="ant design vue"/>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-06-12T00:00:00.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
  <entry>
    <title type="html">antdv更换主题（二）</title>
    <id>http://luckyasme.github.io/ant-design-vue/antdv%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <link href="http://luckyasme.github.io/ant-design-vue/antdv%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料"> 参考资料</h2>
<div><p>提示</p>
<ul>
<li>
<p><a href="https://github.com/vueComponent/ant-design-vue/blob/master/components/style/themes/default.less" target="_blank" rel="noopener noreferrer">ant design vue2.x 样式变量</a></p>
</li>
<li>
<p><a href="https://segmentfault.com/a/1190000016061608" target="_blank" rel="noopener noreferrer">webpack插件实现自动抽取css中的主题色样式，并一键动态切换主题色</a></p>
</li>
</ul>
</div>
<h2 id="思路"> 思路</h2>
<p>如果只是单单更换按钮颜色或者某个组件的颜色，使用 antd-theme-generator 的确很方便，但是如果要实现夜间模式的确有点麻烦。</p>
<p>利用 webpack-theme-color-replacer 可以快速实现，同时CV一份 vue-antd-admin 的颜色配置，不用自己设定颜色，也可以快速实现主题色更换和黑白模式更换。</p>
<div><p>webpack-theme-color-replacer 实现原理</p>
<p>webpack构建时，在准备写入dist结果文件时，将即将生成的所有css文件的内容中 带有指定颜色的css规则单独提取出来，再合并为一个theme-colors.css输出文件。然后在切换主题色时，下载这个文件，并替换为需要的颜色，应用到页面上。这样，下载的样式中就只包含颜色相关的css规则，文件较小；同时它已经包含了项目中所有的css中的指定颜色样式，一次下载全部颜色样式都搞定。</p>
</div>
<h2 id="提取-vue-antd-admin-项目中相关更换主题函数"> 提取 vue-antd-admin 项目中相关更换主题函数</h2>
<p>通过 App.vue 文件可以看出，vue-antd-admin 的更换颜色主题和黑白模式是通过 changeThemeColor 函数实现的，该函数由 themeUtil 提供。</p>
<p>在 src/utils 找到 themeUtil.js。themeUtil 又包含有 color.js（此文件同样存放在 utils 目录下） 以及一些 config 配置。config 指向 src/config 目录。</p>
<p>同样复制一份 themeUtils.js、themeUtils 相关依赖文件和 config 目录到自己项目。</p>
<h2 id="优化config内容"> 优化config内容</h2>
<p>config 存放了 vue-antd-admin 项目的颜色主题、模式、动画等配置。对于我们来说，实际有用的只有颜色主题和模式配置的内容。</p>
<p>此外，对于切换黑白模式导致组件显示异常，项目还配置了 resolve 规则在 webpack 处理时去修正。</p>
<p>因而只有 src/config/default/antd.config.js 和 src/config/replacer/resolve.config.js 这两个有效文件，保留这两个文件，其它可以删删删。</p>
<p>删除之后根据自己放置的目录路径，更改 themeUtils 中的引用路径</p>
<h2 id="antdv-theme-helper"> antdv-theme-helper</h2>
<p>根据 vue-antd-admin 项目更换颜色主题和黑白模式的思路，制作了 antdv-theme-helper 模块。</p>
<p>1.首先安装该模块：</p>
<div><pre><code><span>npm</span> <span>install</span> antdv-theme-helper
</code></pre>
<div><span>1</span><br></div></div><p>2.在 vue.config.js 添加如下代码：</p>
<div><pre><code><span>const</span> <span>{</span> AntdvThemeReplacer<span>,</span> themeUtils <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'antdv-theme-helper'</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span>  <span>{</span>
  <span>configureWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
    config<span>.</span>plugins<span>.</span><span>push</span><span>(</span><span>new</span> <span>AntdvThemeReplacer</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  css<span>:</span> <span>{</span>
    loaderOptions<span>:</span> <span>{</span>
      less<span>:</span> <span>{</span>
        modifyVars<span>:</span> themeUtils<span>.</span><span>modifyVars</span><span>(</span><span>)</span><span>,</span>
        javascriptEnabled<span>:</span> <span>true</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>AntdvThemeReplacer 是一个继承 webpack-theme-color-replacer 的 ThemeColorReplacer 的类，设置了一些默认参数。themeUtils.modifyVars 函数返回一个 antdv 的 less 变量对象。若要覆盖提供的 vars，可以改为：</p>
<div><pre><code>less<span>:</span> <span>{</span>
  modifyVars<span>:</span> <span>{</span>
    <span>...</span>themeUtils<span>.</span><span>modifyVars</span><span>(</span><span>)</span><span>,</span>
    <span>//你要覆盖的 less 变量</span>
  <span>}</span>
  javascriptEnabled<span>:</span> <span>true</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>3.运行时更换主题</p>
<div><pre><code><span>import</span> <span>{</span> themeUtils <span>}</span> <span>from</span> <span>'antdv-theme-helper'</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
  methods<span>:</span> <span>{</span>
    <span>/**
     * @param {string} color 主题颜色
     * @param {string} theme 主题模式 可选 mix, light, dark
     */</span>
    <span>handleChangeThemeColor</span><span>(</span><span>color<span>,</span> theme</span><span>)</span> <span>{</span>
      themeUtils<span>.</span><span>changeThemeColor</span><span>(</span>color<span>,</span> theme<span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div>]]></content>
    <author>
      <name>Luckyasme</name>
    </author>
    <category term="ant design vue"/>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-07-03T00:00:00.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
  <entry>
    <title type="html">我的第一个Electron应用</title>
    <id>http://luckyasme.github.io/electron/%E7%AC%AC%E4%B8%80%E4%B8%AAElectron%E5%BA%94%E7%94%A8/</id>
    <link href="http://luckyasme.github.io/electron/%E7%AC%AC%E4%B8%80%E4%B8%AAElectron%E5%BA%94%E7%94%A8/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料"> 参考资料</h2>
<div><p>提示</p>
<ul>
<li>
<p><a href="https://www.electronjs.org/docs" target="_blank" rel="noopener noreferrer">electron开发文档</a></p>
</li>
<li>
<p><a href="https://segmentfault.com/a/1190000021376934" target="_blank" rel="noopener noreferrer">Electron+Vue开发跨平台桌面应用</a></p>
</li>
</ul>
</div>
<h2 id="安装electron"> 安装Electron</h2>
<p>因为要用Vue开发，Node和Vue的安装不多说了，懂的都懂。这里先安装electron，选择全局安装。</p>
<div><pre><code><span>npm</span> <span>install</span> -g electron
</code></pre>
<div><span>1</span><br></div></div><p>检测安装是否成功，输入如下命令会得到当前electron的版本。</p>
<div><pre><code>electron -v
</code></pre>
<div><span>1</span><br></div></div><h2 id="创建一个项目"> 创建一个项目</h2>
<p>Electron官方提供了一个Demo项目，可参考 <a href="https://segmentfault.com/a/1190000021376934" target="_blank" rel="noopener noreferrer">Electron+Vue开发跨平台桌面应用</a> 文章进行拉取运行。</p>
<p>这里直接使用 Vue 脚手架拉取 simulatedgreg/electron-vue 进行创建项目。</p>
<p>使用该脚手架创建项目会有引导，按照引导一步步输入创建即可。</p>
<div><pre><code>vue init simulatedgreg/electron-vue 要存放的目录
</code></pre>
<div><span>1</span><br></div></div><p>创建完后执行 npm 安装命令下载安装依赖。</p>
<div><pre><code><span>npm</span> i
</code></pre>
<div><span>1</span><br></div></div><p>依赖安装完成后使用执行 dev 就可以看到生成的窗口。</p>
<div><pre><code><span>npm</span> run dev
</code></pre>
<div><span>1</span><br></div></div>]]></content>
    <author>
      <name>Luckyasme</name>
    </author>
    <category term="electron"/>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-06-12T00:00:00.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
  <entry>
    <title type="html">RestTemplate的Get请求参数编码异常问题</title>
    <id>http://luckyasme.github.io/mass/RestTemplate%E7%9A%84Get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</id>
    <link href="http://luckyasme.github.io/mass/RestTemplate%E7%9A%84Get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%BC%96%E7%A0%81%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料"> 参考资料</h2>
<div><p>提示</p>
<ul>
<li>
<p><a href="https://blog.csdn.net/liuyueyi25/article/details/88842702" target="_blank" rel="noopener noreferrer">Spring-RestTemplate之urlencode参数解析异常全程分析</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/xs_challenge/article/details/109451263?depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.control" target="_blank" rel="noopener noreferrer">RestTemplate的Get请求参数urlencode编码加密后请求异常的解决方案</a></p>
</li>
</ul>
</div>
<h2 id="问题描述"> 问题描述</h2>
<p>之前在学校做的某个虚拟仿真项目要接入 ilab-x 平台，根据平台提供的接口，需要由后端发送一些数据过去进行对接。</p>
<p>搞后端的老伙计顺手用了 RestTemplate，但是发过去的 Get 请求如果平台提供的 ticket 有 + 号可以不能正常获取到 access_token。</p>
<p>老伙计搞了半天还在质疑平台提供的 ticket 或者 urlencode 有问题，甚至想出了替换某些符号的骚操作的方法（话说有这时间搜索解决一下不就行了）</p>
<h2 id="问题原因"> 问题原因</h2>
<p>老伙计的采用了字符串拼接参数的方法，并且各参数都没有进行 urlencode，我起初以为是直接拼接没有编码的原因，帮他改成编码后反而全部情况都请求异常了。</p>
<p>我不禁怀疑是 RestTemplate 对 url 编码处理有些不同的原因，搜了一下，还是找到了原因，跟 RFC3986 编码协议有关。</p>
<p>RestTemplate 对 url 编码遵循 RFC3986 编码协议，具体原因可参考<a href="https://blog.csdn.net/liuyueyi25/article/details/88842702" target="_blank" rel="noopener noreferrer">Spring-RestTemplate之urlencode参数解析异常全程分析</a>。</p>
<h2 id="粗暴的解决方法"> 粗暴的解决方法</h2>
<p>毕竟项目这部分不是我负责，我也不想对他写的各项请求进行大概，只能找些简单粗暴的方法：</p>
<p>可以先对各参数进 encode，然后提供 url 使用 Uri.create() 的方法。</p>
<div><pre><code><span>String</span> url <span>=</span> <span>"http://www.xxx.com?param1="</span> <span>+</span> <span>URLEncoder</span><span>.</span><span>encode</span><span>(</span>param1<span>,</span> <span>"UTF-8"</span><span>)</span><span>;</span>
<span>ResponseEntity</span><span><span>&lt;</span><span>String</span><span>></span></span> response <span>=</span> <span>new</span> <span>RestTemplate</span><span>(</span><span>)</span><span>.</span><span>getForEntity</span><span>(</span>URI<span>.</span><span>create</span><span>(</span>url<span>)</span><span>,</span> <span>String</span><span>.</span><span>class</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content>
    <author>
      <name>Luckyasme</name>
    </author>
    <category term="问题记录"/>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-07-11T00:00:00.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
  <entry>
    <title type="html">博客主页</title>
    <id>http://luckyasme.github.io/</id>
    <link href="http://luckyasme.github.io/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <author>
      <name>Luckyasme</name>
    </author>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-07-11T10:55:41.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
  <entry>
    <title type="html">vuepress-theme-hope的尝试及吐槽</title>
    <id>http://luckyasme.github.io/vuepress/vuepress-theme-hope%E7%9A%84%E5%B0%9D%E8%AF%95%E5%8F%8A%E5%90%90%E6%A7%BD/</id>
    <link href="http://luckyasme.github.io/vuepress/vuepress-theme-hope%E7%9A%84%E5%B0%9D%E8%AF%95%E5%8F%8A%E5%90%90%E6%A7%BD/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料"> 参考资料</h2>
<div><p>文档地址</p>
<ul>
<li>
<p><a href="https://vuepress.vuejs.org/zh/guide/" target="_blank" rel="noopener noreferrer">vuepress</a></p>
</li>
<li>
<p><a href="https://vuepress-theme-hope.github.io/zh/" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a></p>
</li>
</ul>
</div>
<h2 id="安装步骤"> 安装步骤</h2>
<p>使用npm来初始化vuepress-theme-hope项目，正常情况下，获取完会自动指引你完成项目的设置并加载依赖。
但是，最近网络极差（且没有安装yarn），在执行到安装依赖的时候会包一个跟yarn相关的错误直接boom。</p>
<div><pre><code><span>npm</span> init vuepress-theme-hope <span>[</span>dir<span>]</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="模板配置"> 模板配置</h2>
<p>默认情况下，笔记、资源和配置是放置在notes目录下，并且保留了一些配置，同时有英文和中文两种语言配套文档。
我只需要保留中文，在config.js文件中移除英文语言配置，并指定默认语言为中文。
此外，为了搭建博客，根据实际需要设定了themeConfig中的一些内容。</p>
<div><pre><code><span>/*
  config.js导出一个config实例，默认中文语言配置，locales指定 / 为zh-CN
*/</span>
<span>const</span> <span>{</span> config <span>}</span> <span>=</span> <span>require</span><span>(</span><span>"vuepress-theme-hope"</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span> <span>config</span><span>(</span><span>{</span>
  
  locales<span>:</span> <span>{</span>
    <span>"/"</span><span>:</span> <span>{</span>
      lang<span>:</span> <span>"zh-CN"</span><span>,</span>
      title<span>:</span> <span>"your title"</span><span>,</span>
      description<span>:</span> <span>"your desc"</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>

  themeConfig<span>:</span><span>{</span>
    <span>{</span>
      author<span>:</span> <span>"***"</span><span>,</span>    <span>//作者</span>
      logo<span>:</span> <span>"***"</span><span>,</span>  <span>//logo图标</span>
      darkmode<span>:</span> <span>'auto'</span><span>,</span>   <span>//黑暗模式</span>

      blog<span>:</span> <span>{</span>
          name<span>:</span> <span>'***'</span><span>,</span>  <span>//博客作者名字</span>
          avatar<span>:</span> <span>'***'</span><span>,</span>    <span>//博客头像</span>
          sidebarDisplay<span>:</span> <span>"mobile"</span><span>,</span>
      <span>}</span><span>,</span>

      footer<span>:</span> <span>{</span>
          display<span>:</span> <span>true</span><span>,</span>
          content<span>:</span> <span>"Blogged by ***"</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span>
  <span>}</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="遇到问题"> 遇到问题</h2>
<div><p>Q1：在Npx引导安装过程中，安装依赖时选择 “淘宝源” 导致安装失败</p>
<ul>
<li>此时，项目应该拉取到本地，使用npm将依赖继续下载，请勿使用cnpm！</li>
</ul>
</div>
<div><p>Q2：使用cnpm成功安装依赖，dev环境下可以调试运行，但是编译打包失败！</p>
<ul>
<li>删除node_modules，使用npm重写安装依赖，请勿使用cnpm。貌似cnpm下载的某个依赖有点问题，导致build时候boom掉。</li>
</ul>
</div>
]]></content>
    <author>
      <name>Luckyasme</name>
    </author>
    <category term="vuepress"/>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-06-10T00:00:00.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
  <entry>
    <title type="html">使用github action自动部署vuepress</title>
    <id>http://luckyasme.github.io/vuepress/%E4%BD%BF%E7%94%A8github%20action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2vuepress/</id>
    <link href="http://luckyasme.github.io/vuepress/%E4%BD%BF%E7%94%A8github%20action%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2vuepress/"/>
    <updated>2021-07-11T10:55:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="参考资料"> 参考资料</h2>
<div><p>文档地址</p>
<ul>
<li><a href="https://docs.github.com/cn/actions" target="_blank" rel="noopener noreferrer">Github Actions</a></li>
</ul>
</div>
<h2 id="创建-yml"> 创建.yml</h2>
<p>在 .github/workflows 目录中创建一个名为 xxx.yml 的新文件，xxx为自己命名。
若没有 .github 目录，先创建 .github 目录，在该目录下创建 workflows 目录，然后再新建 .yml 文件。
（或者在 gitHub 项目 action 处，选择相应的工作流程，在页面处完成 action 创建。这一步 github 会自动在项目下自动创建相关目录和文件）</p>
<div><pre><code><span>name</span><span>:</span> Node.js CI

<span>on</span><span>:</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span> <span>[</span> master <span>]</span>

<span>jobs</span><span>:</span>
  <span>build</span><span>:</span>
    <span>#运行系统</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest  

    <span>strategy</span><span>:</span>
      <span>matrix</span><span>:</span>
        <span>#依赖node环境</span>
        <span>node-version</span><span>:</span> <span>[</span><span>'12'</span><span>]</span> 
        
    <span>#执行步骤</span>
    <span>steps</span><span>:</span>
    <span>-</span> <span>uses</span><span>:</span> actions/checkout@v2
    <span>-</span> <span>name</span><span>:</span> Use Node.js $<span>{</span><span>{</span> matrix.node<span>-</span>version <span>}</span><span>}</span>
      <span>uses</span><span>:</span> actions/setup<span>-</span>node@v2
      <span>with</span><span>:</span>
        <span>node-version</span><span>:</span> $<span>{</span><span>{</span> matrix.node<span>-</span>version <span>}</span><span>}</span>

    <span>-</span> <span>name</span><span>:</span> vuepress<span>-</span>deploy
      <span>uses</span><span>:</span> jenkey2011/vuepress<span>-</span>deploy@master
      <span>env</span><span>:</span>
        <span>ACCESS_TOKEN</span><span>:</span> $<span>{</span><span>{</span> secrets.XXXX <span>}</span><span>}</span> <span>#token，用于执行 github 相关操作</span>
        <span>TARGET_REPO</span><span>:</span> xxxxxxxxx <span>#目标 github page 项目</span>
        <span>TARGET_BRANCH</span><span>:</span> master <span>#目标 github page 的项目分支</span>
        <span>BUILD_SCRIPT</span><span>:</span> npm i <span>&amp;&amp;</span> npm run docs<span>:</span>build <span>#执行命令</span>
        <span>BUILD_DIR</span><span>:</span> dist <span>#编译文件的目录</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h2 id="获取personal-access-tokens"> 获取Personal access tokens</h2>
<p>token 授权了可以操作你 github 的哪些东西，有了这个值才可以把编译好的东西发布到指定的 github page。</p>
<div><p>获取步骤</p>
<p>1.点击右上角头像, 再点击 Settings</p>
<p>2.点击左侧菜单的 Developer settings</p>
<p>3.点击 Personal access tokens</p>
<p>4.点击 Generate new token</p>
<p>5.勾选授权内容，一般只用勾选 repo 就够了，然后点击 Generate toke n按钮生成 token</p>
<p>6.得到 token 记得复制，github 不会保存该 token，关了页面就没了</p>
</div>
<h2 id="设置action-secret供工作流使用"> 设置action secret供工作流使用</h2>
<p>将获取到的 token 放进 action secret 供工作流使用。
这样执行 action 的时候才会获取到 token，从而执行同步 github page 操作。</p>
<div><p>获取步骤</p>
<p>1.进入 vuepress 项目源码（不是发布到的 gitbub page 那个项目）的 Setting 页面</p>
<p>2.点击 Secrets</p>
<p>3.点击 New repository secret</p>
<p>4.输入名称和值，然后点击添加进行保存</p>
<p>5.将yml文件中 ACCESS_TOKEN 处的 secrets.XXXX 的 XXXX 替换为之前输入的名称</p>
</div>
<h2 id="最后的工作"> 最后的工作</h2>
<p>编写完md或者其它文件，推送项目即可触发 github action 工作流，等待执行结束打开相关 github page 就可看到编译出的内容。</p>
]]></content>
    <author>
      <name>Luckyasme</name>
    </author>
    <category term="vuepress"/>
    <contributor>
      <name>Luckyasme</name>
    </contributor>
    <published>2021-06-10T00:00:00.000Z</published>
    <rights>Copyright by Luckyasme</rights>
  </entry>
</feed>